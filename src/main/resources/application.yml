### This is the main way to configure the application (other than annotations).
### This file is in Yaml format but you can also configure spring boot using the traditional
### Java properties file format. 

spring.jmx:
   enabled: false

spring.datasource:
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:bootexample;MODE=MySQL

server:
  port: 8090

#todo: make sure to always enable security in production
security:
  basic:
    enabled: false

#management endpoints on a separate port
management:
  port: 8091
  security:
    enabled: false # management port is internal only. no need to secure it.

#default project info followed by actual injected pom-specified values.
project:
  name: spring-boot-rest-example
  version: 0.1
  description: boot-example default description
info:
  build:
    artifact: ${project.artifactId}
    name: ${project.name}
    description: ${project.description}
    version: ${project.version}

hotel.service:
  name: 'default profile:'
---
spring:
  profiles: test
  h2:
    console:
      enabled: true

spring.jpa:
    hibernate.ddl-auto: create-drop

hotel.service:
  name: 'test profile:'
  
logging:
  file: boot_test.log
  org.hibernate: DEBUG

---
spring:
  profiles: prod
  h2:
    console:
      enabled: true

spring.datasource:
  driverClassName: com.mysql.jdbc.Driver
  url: ${mysql.url:jdbc:mysql://0.0.0.0:6033/bootrest_example}
  ---url: jdbc:mysql://0.0.0.0:6033/bootrest_example
  --url: jdbc:mysql://127.0.0.1:6033/bootrest_example
  username: root
  password: root
  testWhileIdle: true
  validationQuery: SELECT 1

spring.jpa:
  show-sql: true
  hibernate.naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
  hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
  hibernate.ddl-auto: create-drop

hotel.service:
  name: 'prod profile:'

logging:
  file: boot_prod.log
  org.hibernate: INFO


 